- Finish implementation
	- 16-bit decoder
- Refactor data structures
- Write tests
- Git repo
- Experiment with encode algorithms (listed in ssdpcm.c)
	- Binary search
		- Where to start from?
	- Compute histogram of deltas and apply k-means clustering
		- Further refining by hill-climbing or simulated annealing algorithm
	- Psychoacoustic analysis
		- Apply equal-loudness companding before computing SSE
	- Noise shaping
- Implement encoding for 16-bit audio too
- Specify bitstream formats
- Play around with block lengths and bit depths, compression ratios and such
- Implement other SSDPCM variants
	- SSDPCM-Super
		- Two choices of step tables per block
		- Separate bitstream to select which step table to use for every n samples (originally 8)
	- VF-SSDPCM
		- Variable sample rate per block (full, half, quarter)
		- Linear resampling
	- Sub-band SSDPCM?
	- Joint-stereo SSDPCM with downsampled side channel?
		- Look at https://www.youtube.com/watch?v=6kEVVJTsxC8
- Multi-threading support
- Entropy-coding on the bitstream
	- Also try Lossy-LZ compression?




# PLANS

## Faster encode algorithm v1

~~1. Take histogram of deltas in the audio block~~
~~2. Use median-cut to generate a list of 2^n deltas (for n bits per sample)~~
	- The median-cut algorithm can be significantly improved by taking neighboring blocks into account too.
~~3. Use the deltas to encode the block~~
4. Take error measurement
5. Iterate using hill-climbing:
	a. Using error measurement from best block as basis, generate randomly mutated versions of the delta list
		- Observation: smaller deltas should be mutated less than larger deltas
	b. For each mutated version of the delta list, encode the block and take error measurement
	c. If one of the mutated versions results in a lower error metric, choose it as the new basis
	d. Repeat from step 5a until a stop condition is met
		- Number of iterations?
		- Error measurement below a certain threshold?

Note: The fastest runtime is obtained by not iterating at all and instead just using the result from the delta list generated via median-cut. A more basic version of the algorithm thus only needs to implement steps 1-3.

On step 5a:
	- Idea: take standard deviation of the base delta list (stdev)
	- Choose one (or more) of the deltas at random
	- Multiply mean squared error of the block by delta/stdev; multiply that by a random number between -1 and 1 and add it to the delta
		- Maybe use a nonlinear distribution?


